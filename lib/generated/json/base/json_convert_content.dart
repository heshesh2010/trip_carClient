// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:trip_car_client/generated/json/car_entity_helper.dart';
import 'package:trip_car_client/generated/json/conversation_entity_helper.dart';
import 'package:trip_car_client/generated/json/message_entity_helper.dart';
import 'package:trip_car_client/generated/json/order_entity_helper.dart';
import 'package:trip_car_client/generated/json/order_status_entity_helper.dart';
import 'package:trip_car_client/generated/json/review_entity_helper.dart';
import 'package:trip_car_client/generated/json/user_entity_helper.dart';
import 'package:trip_car_client/generated/json/user_review_entity_helper.dart';
import 'package:trip_car_client/src/models/car_entity.dart';
import 'package:trip_car_client/src/models/conversation_entity.dart';
import 'package:trip_car_client/src/models/message_entity.dart';
import 'package:trip_car_client/src/models/order_entity.dart';
import 'package:trip_car_client/src/models/order_status_entity.dart';
import 'package:trip_car_client/src/models/review_entity.dart';
import 'package:trip_car_client/src/models/user_entity.dart';
import 'package:trip_car_client/src/models/user_review_entity.dart';

class JsonConvert<T> {
  T fromJson(Map<String, dynamic> json) {
    return _getFromJson<T>(runtimeType, this, json);
  }

  Map<String, dynamic> toJson() {
    return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
      case OrderStatusEntity:
        return orderStatusEntityFromJson(data as OrderStatusEntity, json) as T;
      case OrderStatusData:
        return orderStatusDataFromJson(data as OrderStatusData, json) as T;
      case CarEntity:
        return carEntityFromJson(data as CarEntity, json) as T;
      case CarData:
        return carDataFromJson(data as CarData, json) as T;
      case CarDataCity:
        return carDataCityFromJson(data as CarDataCity, json) as T;
      case CarDataModel:
        return carDataModelFromJson(data as CarDataModel, json) as T;
      case CarDataYear:
        return carDataYearFromJson(data as CarDataYear, json) as T;
      case CarDataSubModel:
        return carDataSubModelFromJson(data as CarDataSubModel, json) as T;
      case CarDataReview:
        return carDataReviewFromJson(data as CarDataReview, json) as T;
      case CarDataCategory:
        return carDataCategoryFromJson(data as CarDataCategory, json) as T;
      case CarDataUser:
        return carDataUserFromJson(data as CarDataUser, json) as T;
      case CarDataAvailableDate:
        return carDataAvailableDateFromJson(data as CarDataAvailableDate, json)
            as T;
      case UserReviewEntity:
        return userReviewEntityFromJson(data as UserReviewEntity, json) as T;
      case UserReviewData:
        return userReviewDataFromJson(data as UserReviewData, json) as T;
      case OrderEntity:
        return orderEntityFromJson(data as OrderEntity, json) as T;
      case OrderData:
        return orderDataFromJson(data as OrderData, json) as T;
      case OrderDataCar:
        return orderDataCarFromJson(data as OrderDataCar, json) as T;
      case OrderDataStatus:
        return orderDataStatusFromJson(data as OrderDataStatus, json) as T;
      case OrderDataPayment:
        return orderDataPaymentFromJson(data as OrderDataPayment, json) as T;
      case MessageEntity:
        return messageEntityFromJson(data as MessageEntity, json) as T;
      case MessageData:
        return messageDataFromJson(data as MessageData, json) as T;
      case ReviewEntity:
        return reviewEntityFromJson(data as ReviewEntity, json) as T;
      case ReviewData:
        return reviewDataFromJson(data as ReviewData, json) as T;
      case ReviewDataCar:
        return reviewDataCarFromJson(data as ReviewDataCar, json) as T;
      case UserEntity:
        return userEntityFromJson(data as UserEntity, json) as T;
      case UserData:
        return userDataFromJson(data as UserData, json) as T;
      case UserDataUser:
        return userDataUserFromJson(data as UserDataUser, json) as T;
      case ConversationEntity:
        return conversationEntityFromJson(data as ConversationEntity, json)
            as T;
      case ConversationData:
        return conversationDataFromJson(data as ConversationData, json) as T;
      case ConversationDataUser:
        return conversationDataUserFromJson(data as ConversationDataUser, json)
            as T;
      case ConversationDataOrder:
        return conversationDataOrderFromJson(
            data as ConversationDataOrder, json) as T;
      case ConversationDataLatestMessage:
        return conversationDataLatestMessageFromJson(
            data as ConversationDataLatestMessage, json) as T;
    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
    switch (type) {
      case OrderStatusEntity:
        return orderStatusEntityToJson(data as OrderStatusEntity);
      case OrderStatusData:
        return orderStatusDataToJson(data as OrderStatusData);
      case CarEntity:
        return carEntityToJson(data as CarEntity);
      case CarData:
        return carDataToJson(data as CarData);
      case UserReviewEntity:
        return userReviewEntityToJson(data as UserReviewEntity);
      case UserReviewData:
        return userReviewDataToJson(data as UserReviewData);
      case CarDataCity:
        return carDataCityToJson(data as CarDataCity);
      case CarDataModel:
        return carDataModelToJson(data as CarDataModel);
      case CarDataYear:
        return carDataYearToJson(data as CarDataYear);
      case CarDataSubModel:
        return carDataSubModelToJson(data as CarDataSubModel);
      case CarDataReview:
        return carDataReviewToJson(data as CarDataReview);
      case CarDataCategory:
        return carDataCategoryToJson(data as CarDataCategory);
      case CarDataUser:
        return carDataUserToJson(data as CarDataUser);
      case CarDataAvailableDate:
        return carDataAvailableDateToJson(data as CarDataAvailableDate);
      case OrderEntity:
        return orderEntityToJson(data as OrderEntity);
      case OrderData:
        return orderDataToJson(data as OrderData);
      case OrderDataCar:
        return orderDataCarToJson(data as OrderDataCar);
      case OrderDataStatus:
        return orderDataStatusToJson(data as OrderDataStatus);
      case OrderDataPayment:
        return orderDataPaymentToJson(data as OrderDataPayment);
      case MessageEntity:
        return messageEntityToJson(data as MessageEntity);
      case MessageData:
        return messageDataToJson(data as MessageData);
      case ReviewEntity:
        return reviewEntityToJson(data as ReviewEntity);
      case ReviewData:
        return reviewDataToJson(data as ReviewData);
      case ReviewDataCar:
        return reviewDataCarToJson(data as ReviewDataCar);
      case UserEntity:
        return userEntityToJson(data as UserEntity);
      case UserData:
        return userDataToJson(data as UserData);
      case UserDataUser:
        return userDataUserToJson(data as UserDataUser);
      case ConversationEntity:
        return conversationEntityToJson(data as ConversationEntity);
      case ConversationData:
        return conversationDataToJson(data as ConversationData);
      case ConversationDataUser:
        return conversationDataUserToJson(data as ConversationDataUser);
      case ConversationDataOrder:
        return conversationDataOrderToJson(data as ConversationDataOrder);
      case ConversationDataLatestMessage:
        return conversationDataLatestMessageToJson(
            data as ConversationDataLatestMessage);
    }
    return data as T;
  }

  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {
      case 'OrderStatusEntity':
        return OrderStatusEntity().fromJson(json);
      case 'OrderStatusData':
        return OrderStatusData().fromJson(json);
      case 'CarEntity':
        return CarEntity().fromJson(json);
      case 'CarData':
        return CarData().fromJson(json);
      case 'CarDataCity':
        return CarDataCity().fromJson(json);
      case 'CarDataModel':
        return CarDataModel().fromJson(json);
      case 'CarDataYear':
        return CarDataYear().fromJson(json);
      case 'CarDataSubModel':
        return CarDataSubModel().fromJson(json);
      case 'CarDataReview':
        return CarDataReview().fromJson(json);
      case 'CarDataCategory':
        return CarDataCategory().fromJson(json);
      case 'CarDataUser':
        return CarDataUser().fromJson(json);
      case 'CarDataAvailableDate':
        return CarDataAvailableDate().fromJson(json);
      case 'OrderEntity':
        return OrderEntity().fromJson(json);
      case 'UserReviewEntity':
        return UserReviewEntity().fromJson(json);
      case 'UserReviewData':
        return UserReviewData().fromJson(json);
      case 'OrderData':
        return OrderData().fromJson(json);
      case 'OrderDataCar':
        return OrderDataCar().fromJson(json);
      case 'OrderDataUser':
        return UserDataUser().fromJson(json);
      case 'OrderDataStatus':
        return OrderDataStatus().fromJson(json);
      case 'OrderDataPayment':
        return OrderDataPayment().fromJson(json);
      case 'MessageEntity':
        return MessageEntity().fromJson(json);
      case 'MessageData':
        return MessageData().fromJson(json);
      case 'ReviewEntity':
        return ReviewEntity().fromJson(json);
      case 'ReviewData':
        return ReviewData().fromJson(json);
      case 'ReviewDataCar':
        return ReviewDataCar().fromJson(json);
      case 'UserEntity':
        return UserEntity().fromJson(json);
      case 'UserData':
        return UserData().fromJson(json);
      case 'UserDataUser':
        return UserDataUser().fromJson(json);
      case 'ConversationEntity':
        return ConversationEntity().fromJson(json);
      case 'ConversationData':
        return ConversationData().fromJson(json);
      case 'ConversationDataUser':
        return ConversationDataUser().fromJson(json);
      case 'ConversationDataOrder':
        return ConversationDataOrder().fromJson(json);
      case 'ConversationDataLatestMessage':
        return ConversationDataLatestMessage().fromJson(json);
    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {
      case 'OrderStatusEntity':
        return List<OrderStatusEntity>();
      case 'OrderStatusData':
        return List<OrderStatusData>();
      case 'CarEntity':
        return List<CarEntity>();
      case 'CarData':
        return List<CarData>();
      case 'CarDataCity':
        return List<CarDataCity>();
      case 'CarDataModel':
        return List<CarDataModel>();
      case 'CarDataYear':
        return List<CarDataYear>();
      case 'CarDataSubModel':
        return List<CarDataSubModel>();
      case 'CarDataReview':
        return List<CarDataReview>();
      case 'CarDataCategory':
        return List<CarDataCategory>();
      case 'CarDataUser':
        return List<CarDataUser>();
      case 'CarDataAvailableDate':
        return List<CarDataAvailableDate>();
      case 'OrderEntity':
        return List<OrderEntity>();
      case 'OrderData':
        return List<OrderData>();
      case 'OrderDataCar':
        return List<OrderDataCar>();
      case 'UserReviewEntity':
        return List<UserReviewEntity>();
      case 'UserReviewData':
        return List<dynamic>();
      case 'OrderDataUser':
        return List<UserDataUser>();
      case 'OrderDataStatus':
        return List<OrderDataStatus>();
      case 'OrderDataPayment':
        return List<OrderDataPayment>();
      case 'MessageEntity':
        return List<MessageEntity>();
      case 'MessageData':
        return List<MessageData>();
      case 'ReviewEntity':
        return List<ReviewEntity>();
      case 'ReviewData':
        return List<ReviewData>();
      case 'ReviewDataCar':
        return List<ReviewDataCar>();
      case 'UserEntity':
        return List<UserEntity>();
      case 'UserData':
        return List<UserData>();
      case 'UserDataUser':
        return List<UserDataUser>();
      case 'ConversationEntity':
        return List<ConversationEntity>();
      case 'ConversationData':
        return List<ConversationData>();
      case 'ConversationDataUser':
        return List<ConversationDataUser>();
      case 'ConversationDataOrder':
        return List<ConversationDataOrder>();
      case 'ConversationDataLatestMessage':
        return List<ConversationDataLatestMessage>();
    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}
